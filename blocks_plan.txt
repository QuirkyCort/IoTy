Category
===

"set _strip_ to" "NeoPixel at pin _x_ with _y_ leds of type _z_"
  strip = NeoPixel(Pin(0, Pin.OUT), 8, bpp) # bpp3 for RGB, 4 for RGBW

"set NeoPixel _var_ color at _x_ to _r_ _g_ _b_ _w_"
  strip[0] = (255, 255, 255)

"fill NeoPixel _var_ with color _r_ _g_ _b_ _w_"
  strip.fill((255, 255, 255))

"show NeoPixel _var_"
  strip.write()


# I2C
#Software I2C (using bit-banging) works on all output-capable pins

from machine import Pin, SoftI2C

i2c = SoftI2C(scl=Pin(5), sda=Pin(4), freq=100000)

i2c.scan()              # scan for devices

i2c.readfrom(0x3a, 4)   # read 4 bytes from device with address 0x3a
i2c.writeto(0x3a, '12') # write '12' to device with address 0x3a

buf = bytearray(10)     # create a buffer with 10 bytes
i2c.writeto(0x3a, buf)  # write the given buffer to the peripheral

# SPI
# Software SPI (using bit-banging) works on all pins,

from machine import Pin, SoftSPI

# construct a SoftSPI bus on the given pins
# polarity is the idle state of SCK
# phase=0 means sample on the first edge of SCK, phase=1 means the second
spi = SoftSPI(baudrate=100000, polarity=1, phase=0, sck=Pin(0), mosi=Pin(2), miso=Pin(4))

spi.init(baudrate=200000) # set the baudrate

spi.read(10)            # read 10 bytes on MISO
spi.read(10, 0xff)      # read 10 bytes while outputting 0xff on MOSI

buf = bytearray(50)     # create a buffer
spi.readinto(buf)       # read into the given buffer (reads 50 bytes in this case)
spi.readinto(buf, 0xff) # read into the given buffer and output 0xff on MOSI

spi.write(b'12345')     # write 5 bytes on MOSI

buf = bytearray(4)      # create a buffer
spi.write_readinto(b'1234', buf) # write to MOSI and read from MISO into the buffer
spi.write_readinto(buf, buf) # write buf to MOSI and read MISO back into buf

# Network
import network

wlan = network.WLAN(network.STA_IF) # create station interface
wlan.active(True)       # activate the interface
wlan.scan()             # scan for access points
wlan.isconnected()      # check if the station is connected to an AP
wlan.connect('ssid', 'key') # connect to an AP
wlan.config('mac')      # get the interface's MAC address
wlan.ifconfig()         # get the interface's IP/netmask/gw/DNS addresses

ap = network.WLAN(network.AP_IF) # create access-point interface
ap.config(ssid='ESP-AP') # set the SSID of the access point
ap.config(max_clients=10) # set how many clients can connect to the network
ap.active(True)         # activate the interface

def do_connect():
    import network
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print('connecting to network...')
        wlan.connect('ssid', 'key')
        while not wlan.isconnected():
            pass
    print('network config:', wlan.ifconfig())

Once the network is established the socket module can be used to create and use TCP/UDP sockets as usual
urequests module for convenient HTTP requests.

After a call to wlan.connect(), the device will by default retry to connect forever, even when the authentication failed or no AP is in range.
wlan.status() will return network.STAT_CONNECTING in this state until a connection succeeds or the interface gets disabled.
wlan.config(reconnects=n), where n are the number of desired reconnect attempts (0 means it won’t retry, -1 will restore the default behaviour of trying to reconnect forever).

# IoT

use socket

# http

Useful?

# ESP32 specific
esp32.raw_temperature()¶
Read the raw value of the internal temperature sensor, returning an integer.

esp32.hall_sensor()¶
Read the raw value of the internal Hall sensor, returning an integer.


# Others
map
constrain
servo
ultrasonic
OLED display
