Category
===

# ESP-NOW

## init
import network
import espnow

# A WLAN interface must be active to send()/recv()
sta = network.WLAN(network.STA_IF)  # Or network.AP_IF
sta.active(True)
sta.disconnect()      # For ESP8266

e = espnow.ESPNow()
e.active(True)

## Register peer
e.add_peer(b'\xbb\xbb\xbb\xbb\xbb\xbb')

## send
e.send(b'\xbb\xbb\xbb\xbb\xbb\xbb', "Starting...")

## recv
host, msg = e.irecv(0) # 0 to return immediately, -1 to wait forever
# msg == None if timeout

## available
e.any()

## Remove peer
e.del_peer(b'\xbb\xbb\xbb\xbb\xbb\xbb')

# Easy ESP-NOW
## init
import network
import espnow

# A WLAN interface must be active to send()/recv()
sta = network.WLAN(network.STA_IF)  # Or network.AP_IF
sta.active(True)
sta.disconnect()      # For ESP8266

e = espnow.ESPNow()
e.active(True)
e.add_peer(b'\xff\xff\xff\xff\xff\xff')
ez_esp_now_group = 0

## set group
ez_esp_now_group = group

## send
e.send(b'\xbb\xbb\xbb\xbb\xbb\xbb', json.dumps([ez_esp_now_group, data]))

## recv
def ez_esp_now_recv():
  host, msg = e.irecv(0)
  data = json.loads(msg)
  if data[0] == ez_esp_now_group:
    return data[1]
  return None

# mounting of sdcard as filesystem

# SPI
# Software SPI (using bit-banging) works on all pins,

from machine import Pin, SoftSPI

# construct a SoftSPI bus on the given pins
# polarity is the idle state of SCK
# phase=0 means sample on the first edge of SCK, phase=1 means the second
spi = SoftSPI(baudrate=100000, polarity=1, phase=0, sck=Pin(0), mosi=Pin(2), miso=Pin(4))

spi.init(baudrate=200000) # set the baudrate

spi.read(10)            # read 10 bytes on MISO
spi.read(10, 0xff)      # read 10 bytes while outputting 0xff on MOSI

buf = bytearray(50)     # create a buffer
spi.readinto(buf)       # read into the given buffer (reads 50 bytes in this case)
spi.readinto(buf, 0xff) # read into the given buffer and output 0xff on MOSI

spi.write(b'12345')     # write 5 bytes on MOSI

buf = bytearray(4)      # create a buffer
spi.write_readinto(b'1234', buf) # write to MOSI and read from MISO into the buffer
spi.write_readinto(buf, buf) # write buf to MOSI and read MISO back into buf
